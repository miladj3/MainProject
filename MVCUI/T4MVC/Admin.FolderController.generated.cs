// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MVCUI.Areas.Admin.Controllers
{
    public partial class FolderController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FolderController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteFolder()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteFolder);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Pictures()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pictures);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddPictureToFolder()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPictureToFolder);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeletePicture()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeletePicture);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckFolderNameExistForAdd()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForAdd);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckFolderNameExistForEdit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForEdit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FolderController Actions { get { return MVC.Admin.Folder; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Folder";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Folder";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string CreateFolder = "CreateFolder";
            public readonly string Edit = "Edit";
            public readonly string DeleteFolder = "DeleteFolder";
            public readonly string Pictures = "Pictures";
            public readonly string ListOfPicture = "ListOfPicture";
            public readonly string AddPictureToFolder = "AddPictureToFolder";
            public readonly string DeletePicture = "DeletePicture";
            public readonly string ListForLightBox = "ListForLightBox";
            public readonly string CheckFolderNameExistForAdd = "CheckFolderNameExistForAdd";
            public readonly string CheckFolderNameExistForEdit = "CheckFolderNameExistForEdit";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string CreateFolder = "CreateFolder";
            public const string Edit = "Edit";
            public const string DeleteFolder = "DeleteFolder";
            public const string Pictures = "Pictures";
            public const string ListOfPicture = "ListOfPicture";
            public const string AddPictureToFolder = "AddPictureToFolder";
            public const string DeletePicture = "DeletePicture";
            public const string ListForLightBox = "ListForLightBox";
            public const string CheckFolderNameExistForAdd = "CheckFolderNameExistForAdd";
            public const string CheckFolderNameExistForEdit = "CheckFolderNameExistForEdit";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string ElementId = "ElementId";
        }
        static readonly ActionParamsClass_CreateFolder s_params_CreateFolder = new ActionParamsClass_CreateFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateFolder CreateFolderParams { get { return s_params_CreateFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateFolder
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteFolder s_params_DeleteFolder = new ActionParamsClass_DeleteFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteFolder DeleteFolderParams { get { return s_params_DeleteFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteFolder
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_Pictures s_params_Pictures = new ActionParamsClass_Pictures();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Pictures PicturesParams { get { return s_params_Pictures; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Pictures
        {
            public readonly string folderId = "folderId";
            public readonly string elementId = "elementId";
        }
        static readonly ActionParamsClass_ListOfPicture s_params_ListOfPicture = new ActionParamsClass_ListOfPicture();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListOfPicture ListOfPictureParams { get { return s_params_ListOfPicture; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListOfPicture
        {
            public readonly string page = "page";
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_AddPictureToFolder s_params_AddPictureToFolder = new ActionParamsClass_AddPictureToFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddPictureToFolder AddPictureToFolderParams { get { return s_params_AddPictureToFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddPictureToFolder
        {
            public readonly string folderId = "folderId";
            public readonly string files = "files";
        }
        static readonly ActionParamsClass_DeletePicture s_params_DeletePicture = new ActionParamsClass_DeletePicture();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeletePicture DeletePictureParams { get { return s_params_DeletePicture; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeletePicture
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ListForLightBox s_params_ListForLightBox = new ActionParamsClass_ListForLightBox();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListForLightBox ListForLightBoxParams { get { return s_params_ListForLightBox; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListForLightBox
        {
            public readonly string page = "page";
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_CheckFolderNameExistForAdd s_params_CheckFolderNameExistForAdd = new ActionParamsClass_CheckFolderNameExistForAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckFolderNameExistForAdd CheckFolderNameExistForAddParams { get { return s_params_CheckFolderNameExistForAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckFolderNameExistForAdd
        {
            public readonly string Name = "Name";
        }
        static readonly ActionParamsClass_CheckFolderNameExistForEdit s_params_CheckFolderNameExistForEdit = new ActionParamsClass_CheckFolderNameExistForEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckFolderNameExistForEdit CheckFolderNameExistForEditParams { get { return s_params_CheckFolderNameExistForEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckFolderNameExistForEdit
        {
            public readonly string Name = "Name";
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _picturePartial = "_picturePartial";
                public readonly string AddPictureToFolder = "AddPictureToFolder";
                public readonly string CreateFolder = "CreateFolder";
                public readonly string Edit = "Edit";
                public readonly string Index = "Index";
                public readonly string ListOfPicture = "ListOfPicture";
                public readonly string Pictures = "Pictures";
            }
            public readonly string _picturePartial = "~/Areas/Admin/Views/Folder/_picturePartial.cshtml";
            public readonly string AddPictureToFolder = "~/Areas/Admin/Views/Folder/AddPictureToFolder.cshtml";
            public readonly string CreateFolder = "~/Areas/Admin/Views/Folder/CreateFolder.cshtml";
            public readonly string Edit = "~/Areas/Admin/Views/Folder/Edit.cshtml";
            public readonly string Index = "~/Areas/Admin/Views/Folder/Index.cshtml";
            public readonly string ListOfPicture = "~/Areas/Admin/Views/Folder/ListOfPicture.cshtml";
            public readonly string Pictures = "~/Areas/Admin/Views/Folder/Pictures.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_FolderController : MVCUI.Areas.Admin.Controllers.FolderController
    {
        public T4MVC_FolderController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ElementId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index(string ElementId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ElementId", ElementId);
            IndexOverride(callInfo, ElementId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CreateFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateFolder()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateFolder);
            CreateFolderOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CreateFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.ViewModel.Admin.Folder.AddFolderViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CreateFolder(ViewModel.ViewModel.Admin.Folder.AddFolderViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateFolderOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.ViewModel.Admin.Folder.EditFolderViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(ViewModel.ViewModel.Admin.Folder.EditFolderViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteFolderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, long? Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteFolder(long? Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            DeleteFolderOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void PicturesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? folderId, string elementId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Pictures(long? folderId, string elementId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pictures);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "elementId", elementId);
            PicturesOverride(callInfo, folderId, elementId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListOfPictureOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, int page, long folderId);

        [NonAction]
        public override System.Web.Mvc.PartialViewResult ListOfPicture(int page, long folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.ListOfPicture);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ListOfPictureOverride(callInfo, page, folderId);
            return callInfo;
        }

        [NonAction]
        partial void AddPictureToFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? folderId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddPictureToFolder(long? folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPictureToFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            AddPictureToFolderOverride(callInfo, folderId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddPictureToFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Collections.Generic.IEnumerable<System.Web.HttpPostedFileBase> files, long? folderId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddPictureToFolder(System.Collections.Generic.IEnumerable<System.Web.HttpPostedFileBase> files, long? folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPictureToFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "files", files);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            AddPictureToFolderOverride(callInfo, files, folderId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeletePictureOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, long? id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeletePicture(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeletePicture);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeletePictureOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListForLightBoxOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, int page, long folderId);

        [NonAction]
        public override System.Web.Mvc.PartialViewResult ListForLightBox(int page, long folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.ListForLightBox);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ListForLightBoxOverride(callInfo, page, folderId);
            return callInfo;
        }

        [NonAction]
        partial void CheckFolderNameExistForAddOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string Name);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckFolderNameExistForAdd(string Name)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Name", Name);
            CheckFolderNameExistForAddOverride(callInfo, Name);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckFolderNameExistForEditOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string Name, long id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckFolderNameExistForEdit(string Name, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Name", Name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CheckFolderNameExistForEditOverride(callInfo, Name, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
