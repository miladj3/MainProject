@using DomainClasses.Entities;
@model IEnumerable<Category>

<nav id="m-navbar" role="navigation">
    <ul>
        <li>
            @Html.ActionLink("خانه", MVC.Home.ActionNames.Index, MVC.Home.Name, null, htmlAttributes: new { @class = "m-l" })
        </li>
        @foreach (Category levelOne in Model.OrderBy(x => x.DisplayOrder))
        {
            <li>
                @Html.ActionLink(linkText: levelOne.Name,
                                actionName: MVC.Search.ActionNames.Index,
                                controllerName: MVC.Search.Name,
                                routeValues: new { categoryId = levelOne.Id },
                                htmlAttributes: null)

                @if (levelOne.Children != null && levelOne.Children.Any())
                {
                    <ul>
                        @foreach (var levelSecond in levelOne.Children.OrderBy(x => x.DisplayOrder))
                        {
                            <li>
                                @Html.ActionLink(linkText: levelSecond.Name,
                                actionName: MVC.Search.ActionNames.Index,
                                controllerName: MVC.Search.Name,
                                routeValues: new { categoryId = levelSecond.Id },
                                htmlAttributes: null)
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
</nav>

<div id="m-drawer-menu">
    <ul id="_m34x2y" data-toggle="true">
        <li>
            @Html.ActionLink("خانه", MVC.Home.ActionNames.Index, MVC.Home.Name, null, htmlAttributes: new { @class = "m-l" })
        </li>
        @foreach (Category levelOne in Model.OrderBy(x => x.DisplayOrder))
        {
            <li>
                @Html.ActionLink(linkText: levelOne.Name,
                                actionName: MVC.Search.ActionNames.Index,
                                controllerName: MVC.Search.Name,
                                routeValues: new { categoryId = levelOne.Id },
                                htmlAttributes: null)
                <i class="fa fa-angle-right"></i>
                @if (levelOne.Children != null && levelOne.Children.Any())
                {
                    <ul>
                        @foreach (var levelSecond in levelOne.Children.OrderBy(x => x.DisplayOrder))
                        {
                            <li class="_m34x25y">
                                <i class="fa fa-angle-left"></i>
                                @Html.ActionLink(linkText: levelSecond.Name,
                                actionName: MVC.Search.ActionNames.Index,
                                controllerName: MVC.Search.Name,
                                routeValues: new { categoryId = levelSecond.Id },
                                htmlAttributes: null)
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
</div>
